{"ast":null,"code":"var _jsxFileName = \"/home/leo1305286/collab-web3/reverif/frontend/src/contexts/Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_CONFIG, CONTRACT_ABI } from '../config/contract';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\nexport const useWeb3 = () => {\n  _s();\n  const context = useContext(Web3Context);\n  if (!context) {\n    throw new Error('useWeb3 must be used within a Web3Provider');\n  }\n  return context;\n};\n_s(useWeb3, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [network, setNetwork] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Initialize provider\n  const initializeProvider = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const network = await provider.getNetwork();\n        setProvider(provider);\n        setNetwork(network);\n\n        // Check if already connected\n        const accounts = await provider.listAccounts();\n        if (accounts.length > 0) {\n          setAccount(accounts[0].address);\n          const signer = await provider.getSigner();\n          setSigner(signer);\n          setIsConnected(true);\n\n          // Initialize contract\n          initializeContract(signer);\n        }\n      } catch (error) {\n        console.error('Failed to initialize provider:', error);\n        toast.error('Failed to initialize Web3 provider');\n      }\n    } else {\n      toast.error('MetaMask not detected. Please install MetaMask.');\n    }\n  };\n\n  // Initialize contract\n  const initializeContract = signerOrProvider => {\n    try {\n      const contractInstance = new ethers.Contract(CONTRACT_CONFIG.CONTRACT_ADDRESS, CONTRACT_ABI, signerOrProvider);\n      setContract(contractInstance);\n    } catch (error) {\n      console.error('Failed to initialize contract:', error);\n      toast.error('Failed to initialize contract');\n    }\n  };\n\n  // Connect wallet\n  const connectWallet = async () => {\n    if (!provider) {\n      toast.error('Please install MetaMask');\n      return;\n    }\n    setIsConnecting(true);\n    try {\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n        const signer = await provider.getSigner();\n        setSigner(signer);\n        setIsConnected(true);\n\n        // Initialize contract\n        initializeContract(signer);\n        toast.success('Wallet connected successfully!');\n      }\n    } catch (error) {\n      console.error('Failed to connect wallet:', error);\n      toast.error('Failed to connect wallet');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = () => {\n    setAccount(null);\n    setSigner(null);\n    setContract(null);\n    setIsConnected(false);\n    toast.success('Wallet disconnected');\n  };\n\n  // Switch network\n  const switchNetwork = async chainId => {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: `0x${chainId.toString(16)}`\n        }]\n      });\n    } catch (error) {\n      console.error('Failed to switch network:', error);\n      toast.error('Failed to switch network');\n    }\n  };\n\n  // Format address for display\n  const formatAddress = address => {\n    if (!address) return '';\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n\n  // Format Ether value\n  const formatEther = value => {\n    try {\n      return ethers.formatEther(value);\n    } catch (error) {\n      return '0';\n    }\n  };\n\n  // Parse Ether value\n  const parseEther = value => {\n    try {\n      return ethers.parseEther(value.toString());\n    } catch (error) {\n      return ethers.parseEther(\"0\");\n    }\n  };\n\n  // Get transaction receipt\n  const getTransactionReceipt = async txHash => {\n    try {\n      return await provider.getTransactionReceipt(txHash);\n    } catch (error) {\n      console.error('Failed to get transaction receipt:', error);\n      return null;\n    }\n  };\n\n  // Wait for transaction\n  const waitForTransaction = async (txHash, confirmations = 1) => {\n    try {\n      return await provider.waitForTransaction(txHash, confirmations);\n    } catch (error) {\n      console.error('Failed to wait for transaction:', error);\n      throw error;\n    }\n  };\n\n  // Handle account changes\n  useEffect(() => {\n    if (window.ethereum) {\n      const handleAccountsChanged = async accounts => {\n        if (accounts.length === 0) {\n          disconnectWallet();\n        } else if (accounts[0] !== account) {\n          setAccount(accounts[0]);\n          if (provider) {\n            const signer = await provider.getSigner();\n            setSigner(signer);\n            initializeContract(signer);\n          }\n        }\n      };\n      const handleChainChanged = chainId => {\n        window.location.reload(); // Refresh page on network change\n      };\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, [account, provider]);\n\n  // Initialize on mount\n  useEffect(() => {\n    initializeProvider();\n  }, []);\n  const value = {\n    // State\n    account,\n    provider,\n    signer,\n    contract,\n    network,\n    isConnecting,\n    isConnected,\n    // Actions\n    connectWallet,\n    disconnectWallet,\n    switchNetwork,\n    // Utilities\n    formatAddress,\n    formatEther,\n    parseEther,\n    getTransactionReceipt,\n    waitForTransaction,\n    // Contract info\n    contractAddress: CONTRACT_CONFIG.CONTRACT_ADDRESS\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n};\n_s2(Web3Provider, \"fAgOh/kSP7/dF9rl9Rx4KIlHkjM=\");\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ethers","CONTRACT_CONFIG","CONTRACT_ABI","toast","jsxDEV","_jsxDEV","Web3Context","useWeb3","_s","context","Error","Web3Provider","children","_s2","account","setAccount","provider","setProvider","signer","setSigner","contract","setContract","network","setNetwork","isConnecting","setIsConnecting","isConnected","setIsConnected","initializeProvider","window","ethereum","BrowserProvider","getNetwork","accounts","listAccounts","length","address","getSigner","initializeContract","error","console","signerOrProvider","contractInstance","Contract","CONTRACT_ADDRESS","connectWallet","request","method","success","disconnectWallet","switchNetwork","chainId","params","toString","formatAddress","slice","formatEther","value","parseEther","getTransactionReceipt","txHash","waitForTransaction","confirmations","handleAccountsChanged","handleChainChanged","location","reload","on","removeListener","contractAddress","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/leo1305286/collab-web3/reverif/frontend/src/contexts/Web3Context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_CONFIG, CONTRACT_ABI } from '../config/contract';\nimport toast from 'react-hot-toast';\n\nconst Web3Context = createContext();\n\nexport const useWeb3 = () => {\n  const context = useContext(Web3Context);\n  if (!context) {\n    throw new Error('useWeb3 must be used within a Web3Provider');\n  }\n  return context;\n};\n\nexport const Web3Provider = ({ children }) => {\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [network, setNetwork] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Initialize provider\n  const initializeProvider = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const network = await provider.getNetwork();\n        \n        setProvider(provider);\n        setNetwork(network);\n        \n        // Check if already connected\n        const accounts = await provider.listAccounts();\n        if (accounts.length > 0) {\n          setAccount(accounts[0].address);\n          const signer = await provider.getSigner();\n          setSigner(signer);\n          setIsConnected(true);\n          \n          // Initialize contract\n          initializeContract(signer);\n        }\n      } catch (error) {\n        console.error('Failed to initialize provider:', error);\n        toast.error('Failed to initialize Web3 provider');\n      }\n    } else {\n      toast.error('MetaMask not detected. Please install MetaMask.');\n    }\n  };\n\n  // Initialize contract\n  const initializeContract = (signerOrProvider) => {\n    try {\n      const contractInstance = new ethers.Contract(\n        CONTRACT_CONFIG.CONTRACT_ADDRESS,\n        CONTRACT_ABI,\n        signerOrProvider\n      );\n      setContract(contractInstance);\n    } catch (error) {\n      console.error('Failed to initialize contract:', error);\n      toast.error('Failed to initialize contract');\n    }\n  };\n\n  // Connect wallet\n  const connectWallet = async () => {\n    if (!provider) {\n      toast.error('Please install MetaMask');\n      return;\n    }\n\n    setIsConnecting(true);\n    try {\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n        const signer = await provider.getSigner();\n        setSigner(signer);\n        setIsConnected(true);\n        \n        // Initialize contract\n        initializeContract(signer);\n        \n        toast.success('Wallet connected successfully!');\n      }\n    } catch (error) {\n      console.error('Failed to connect wallet:', error);\n      toast.error('Failed to connect wallet');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = () => {\n    setAccount(null);\n    setSigner(null);\n    setContract(null);\n    setIsConnected(false);\n    toast.success('Wallet disconnected');\n  };\n\n  // Switch network\n  const switchNetwork = async (chainId) => {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: `0x${chainId.toString(16)}` }],\n      });\n    } catch (error) {\n      console.error('Failed to switch network:', error);\n      toast.error('Failed to switch network');\n    }\n  };\n\n  // Format address for display\n  const formatAddress = (address) => {\n    if (!address) return '';\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n\n  // Format Ether value\n  const formatEther = (value) => {\n    try {\n      return ethers.formatEther(value);\n    } catch (error) {\n      return '0';\n    }\n  };\n\n  // Parse Ether value\n  const parseEther = (value) => {\n    try {\n      return ethers.parseEther(value.toString());\n    } catch (error) {\n      return ethers.parseEther(\"0\");\n    }\n  };\n\n  // Get transaction receipt\n  const getTransactionReceipt = async (txHash) => {\n    try {\n      return await provider.getTransactionReceipt(txHash);\n    } catch (error) {\n      console.error('Failed to get transaction receipt:', error);\n      return null;\n    }\n  };\n\n  // Wait for transaction\n  const waitForTransaction = async (txHash, confirmations = 1) => {\n    try {\n      return await provider.waitForTransaction(txHash, confirmations);\n    } catch (error) {\n      console.error('Failed to wait for transaction:', error);\n      throw error;\n    }\n  };\n\n  // Handle account changes\n  useEffect(() => {\n    if (window.ethereum) {\n      const handleAccountsChanged = async (accounts) => {\n        if (accounts.length === 0) {\n          disconnectWallet();\n        } else if (accounts[0] !== account) {\n          setAccount(accounts[0]);\n          if (provider) {\n            const signer = await provider.getSigner();\n            setSigner(signer);\n            initializeContract(signer);\n          }\n        }\n      };\n\n      const handleChainChanged = (chainId) => {\n        window.location.reload(); // Refresh page on network change\n      };\n\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, [account, provider]);\n\n  // Initialize on mount\n  useEffect(() => {\n    initializeProvider();\n  }, []);\n\n  const value = {\n    // State\n    account,\n    provider,\n    signer,\n    contract,\n    network,\n    isConnecting,\n    isConnected,\n    \n    // Actions\n    connectWallet,\n    disconnectWallet,\n    switchNetwork,\n    \n    // Utilities\n    formatAddress,\n    formatEther,\n    parseEther,\n    getTransactionReceipt,\n    waitForTransaction,\n    \n    // Contract info\n    contractAddress: CONTRACT_CONFIG.CONTRACT_ADDRESS,\n  };\n\n  return (\n    <Web3Context.Provider value={value}>\n      {children}\n    </Web3Context.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}